import csv
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from datetime import datetime
import power_generation_maths

from variables_file import longitude, year, pitch, yaw, roll

total_power = []
day_of_year = []
latitude_graph = []

def day_month_to_day_of_year(day, month):
    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if month == 1:
        return day
    else:
        day_of_year = sum(days_in_month[:month-1]) + day
        if is_leap_year(year) and month > 2:
            day_of_year += 1
        return day_of_year

def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

def sense_plot_day(day, month, latitude):
    power_of_day = 0

    for hour in range(24):
        for minute in range(60):
            for second in range(60):
                sun_values = power_generation_maths.power_on_wing(latitude, longitude, year, month, day, hour, minute, second, pitch, yaw, roll)
                power_of_day += sun_values.output_power
                
    total_power.append(power_of_day)
    day_of_year.append(day_month_to_day_of_year(day, month))
    latitude_graph.append(latitude)

def sense_plot_year(latitude):
    for month in range(11):
        month += 1
        sense_plot_day(1, month, latitude)

def diff_latitude():
    for latitude in range(10):
        latitude *= 10
        sense_plot_year(latitude)

diff_latitude()

total_power = [power / 1000 for power in total_power]  # Convert from Wh to kWh

# Creating the 3D scatter plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(day_of_year, latitude_graph, total_power,  c=latitude_graph, cmap='coolwarm')
ax.set_zlabel('Outputted Power (kWh)')
ax.set_xlabel('Day of Year')
ax.set_ylabel('Latitude')
ax.set_title('Power Output vs. Latitude and Day of Year')
ax.set_xlim([0, max(total_power)])
ax.set_ylim([0, 365])
ax.set_zlim([0, 90])
plt.grid(True)
plt.show()

# Saving data to CSV
data = zip(total_power, day_of_year, latitude_graph)
csv_filename = 'power_data.csv'

with open(csv_filename, 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['Outputted Power (kWh)', 'Day of Year', 'Latitude'])
    writer.writerows(data)

print(f"Data saved to {csv_filename}.")
