import cv2
import numpy as np
import matplotlib.pyplot as plt
from rtree import index

def split_image(image_path, threshold, map_path):
    # Load the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Split the image into areas above and below the threshold
    image_map = np.where(image > threshold, 255, 0).astype(np.uint8)
    
    # Save the split image to a new file
    cv2.imwrite(map_path, image_map)

def extract_polygons(image_path):
    # Load the image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Apply a threshold to extract the darker regions
    _, thresholded = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    
    # Find contours in the thresholded image
    contours, _ = cv2.findContours(thresholded, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    polygons = []
    
    # Iterate through the contours and approximate them as polygons
    for contour in contours:
        epsilon = 0.00001 * cv2.arcLength(contour, True)  # Decreased epsilon value for higher resolution
        polygon = cv2.approxPolyDP(contour, epsilon, True)
        
        if polygon.shape[0] >= 3:
            if not np.array_equal(polygon[0], polygon[-1]):
                polygon = np.reshape(polygon, (-1, 2))
                polygon = np.vstack((polygon, polygon[0]))  # Append the first point to close the polygon
            polygons.append(polygon.astype(float))
    
    return polygons

image_path = 'render-4.png'
threshold = 70  # Adjust this threshold value to control the split
map_path = 'image_map.png'  # Path to save the above threshold image

split_image(image_path, threshold, map_path)

# Extract polygons from the below threshold image
polygons = extract_polygons(map_path)

# Create an R-tree index and insert the polygons
idx = index.Index()
for i, polygon in enumerate(polygons):
    idx.insert(i, (polygon[:, 0].min(), polygon[:, 1].min(), polygon[:, 0].max(), polygon[:, 1].max()), obj=polygon)

# Plot the image and polygons
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image)
plt.axis('off')

for polygon in polygons:
    plt.plot(polygon[:, 0], polygon[:, 1], 'r-')

plt.show()
